/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample C++ project to get you started.
 * For more details take a look at the Building C++ applications and libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.6.1/userguide/building_cpp_projects.html
 */

plugins {
    // Apply the cpp-library plugin to add support for building C++ libraries
    id 'cpp-library'
    id 'cpp'
    id 'java'

    // Apply the cpp-unit-test plugin to add support for building and running C++ test executables
    // id 'cpp-unit-test'
}

// REFERENCE: this task and library is based on SEC Prac 4 
tasks.withType(CppCompile).configureEach {
    // Tell the C++ compiler about the JNI. There are a series of C/C++ header files that come 
    // with the JDK. To find the JDK, we consult the 'JAVA_HOME' environment variable.
    
    // The actual 'jni.h' file lives in the 'include' directory, but there are also a series of 
    // other, platform-specific header files in 'include/linux' and/or 'include/win32'. Your actual
    // JDK may only have one of these platform-specific directories.
    
    includes "$System.env.JAVA_HOME/include"
    includes "$System.env.JAVA_HOME/include/linux"
    includes "$System.env.JAVA_HOME/include/win32"
}

// Set the target operating system and architecture for this library
library {
    // Define the library's name. (The file produced will be 'lib<baseName>.so' on Linux or 
    // '<baseName>.dll' on Windows.)
    baseName = 'native_plugin'

    // Create a 'shared' library only (not a 'static' library).
    linkage = [Linkage.SHARED]
    
    // What is the target platform?
    targetMachines = [
        machines.linux.x86_64,
        machines.windows.x86_64,
        machines.macOS.x86_64
    ]
}

// Create native Library for java_native_loader to access
model {
    components {
        native_plugin(NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        srcDirs 'src/main/cpp'
                        include '**/*.cpp'
                    }
                }
            }

            binaries.all {
                cCompiler.args "-I$System.env.JAVA_HOME/include"
                cCompiler.args "-I$System.env.JAVA_HOME/include/linux"
                cCompiler.args "-I$System.env.JAVA_HOME/include/win32"
            }
        }
    }
}

// This is set up just in case build/distribution packages are used to run app
// If running from zip distribution need to  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/Downloads 
// Copy the native_plugin.so to home Downloads folder
task copyToDownloads {
    doLast {
        copy {
            from "build/libs/native_plugin/shared/libnative_plugin.so"
            into "${System.properties['user.home']}/Downloads"
        }
    }
}

// Remove the native_plugin.so to home Downloads folder
task removeNativePlugin {
    doLast {
        delete {
            delete "${System.properties['user.home']}/Downloads/libnative_plugin.so"
        }
    }
}

// after build move the lib file to user's download folder
build.finalizedBy copyToDownloads
// after clean remove the lib file from user's download folder
clean.finalizedBy removeNativePlugin

